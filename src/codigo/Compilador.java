/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package codigo;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Junior
 */
public class Compilador extends javax.swing.JFrame {
    DefaultTableModel modelo;
    
    /**
     * Creates new form Analizador_Sintactico
     */
    public Compilador() {
        initComponents();
        modelo = new DefaultTableModel();
        modelo.addColumn("Token");
        modelo.addColumn("Lexema");
        this.tb_lexico.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_entrada = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_lexico = new javax.swing.JTable();
        btn_limpieza = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_salida = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_ejecutar = new javax.swing.JButton();
        btn_search = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("COMPILADOR");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
        );

        txt_entrada.setColumns(20);
        txt_entrada.setRows(5);
        jScrollPane1.setViewportView(txt_entrada);

        tb_lexico.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tb_lexico.setForeground(new java.awt.Color(51, 51, 51));
        tb_lexico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "LEXEMA", "TOKENS"
            }
        ));
        jScrollPane2.setViewportView(tb_lexico);

        btn_limpieza.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_limpieza.setForeground(new java.awt.Color(0, 102, 153));
        btn_limpieza.setText("Limpiar todo");
        btn_limpieza.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 204)));
        btn_limpieza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_limpiezaActionPerformed(evt);
            }
        });

        txt_salida.setColumns(20);
        txt_salida.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_salida.setForeground(new java.awt.Color(0, 153, 51));
        txt_salida.setRows(5);
        jScrollPane3.setViewportView(txt_salida);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("CODIGO FUENTE");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 204)));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("CODIGO INTERMEDIO");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 204)));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("ANALIZADOR SINTACTICO");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 204)));

        btn_ejecutar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_ejecutar.setForeground(new java.awt.Color(0, 102, 153));
        btn_ejecutar.setText("Ejecutar");
        btn_ejecutar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 204)));
        btn_ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ejecutarActionPerformed(evt);
            }
        });

        btn_search.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_search.setForeground(new java.awt.Color(0, 102, 153));
        btn_search.setText("Buscar Archivo");
        btn_search.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 204)));
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("ANALIZADOR LÃ‰XICO");
        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 204)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(btn_limpieza, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_limpieza, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btn_ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        search_file();
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_limpiezaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_limpiezaActionPerformed
        Clear();
    }//GEN-LAST:event_btn_limpiezaActionPerformed

    private void btn_ejecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ejecutarActionPerformed
        int fila = tb_lexico.getRowCount();
        for(int i =fila-1; i>=0; i--)
        {
            modelo.removeRow(i);
        }
        
        try {
            analizarLexico();
            analizarSintesis();
            CodigoIntermedio();
            archivo = null;
        } catch (IOException ex) {
            Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
        }        

    }//GEN-LAST:event_btn_ejecutarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) "
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        ///editor-fold
        ///editor-fold

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compilador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_ejecutar;
    private javax.swing.JButton btn_limpieza;
    private javax.swing.JButton btn_search;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTable tb_lexico;
    private javax.swing.JTextArea txt_entrada;
    private javax.swing.JTextArea txt_salida;
    // End of variables declaration//GEN-END:variables
    File archivo;
    private void search_file() {
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        archivo = new File(chooser.getSelectedFile().getAbsolutePath());
                
        try {
            String ST = new String(Files.readAllBytes(archivo.toPath()));
            txt_entrada.setText(ST);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }
    
    private void Clear()
    {
        int fila = tb_lexico.getRowCount();
        for(int i =fila-1; i>=0; i--)
        {
            modelo.removeRow(i);
        }
        txt_entrada.setText("");
        txt_salida.setText("");
    }
    
    
    private void analizarLexico() throws IOException
    {
        int cont = 1; //Contador de linea
        String[] info = new String[2];
        
        String expr = (String) txt_entrada.getText();
        Lexer lexer = new Lexer(new StringReader(expr));
        //String resultado = "LINEA " + cont + "\t\tSIMBOLO\n";
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                info[0] = "Linea" + cont;
                info[1] = "Simbolo";
                modelo.addRow(info);
                return;
            }
            
            
            switch (token) {
                case Linea:
                    cont++;
                    info[0] = "Linea " + cont;
                    info[1] = "";
                    modelo.addRow(info);
                    break;
                case Comillas:
                    info[0] = "Comillas";
                    info[1] = lexer.lexeme;  
                    modelo.addRow(info);
                    break;
                case Cadena:
                    info[0] = "Tipo de dato";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case T_dato:
                    info[0] = "Tipo de dato";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case If:
                    info[0] = "Reservada if";
                    modelo.addRow(info);
                    info[1] = lexer.lexeme;
                    break;
                case Else:
                    info[0] = "Reservada else";
                    modelo.addRow(info);
                    info[1] = lexer.lexeme;
                    break;
                case Do:
                    info[0] = "Reservada do";
                    modelo.addRow(info);
                    info[1] = lexer.lexeme;
                    break;
                case While:
                    info[0] = "Reservada while";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case For:
                    info[0] = "Reservada for";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Igual:
                    info[0] = "Operador igual";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Suma:
                    info[0] = "Operador suma";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Resta:
                    info[0] = "Operador resta";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Multiplicacion:
                    info[0] = "Operador multiplicacion";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Division:
                    info[0] = "Operador division";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Op_logico:
                    info[0] = "Operador logico";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Op_incremento:
                    info[0] = "Operador incremento";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Op_relacional:
                    info[0] = "Operador relacional";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Op_atribucion:
                    info[0] = "Operador atribucion";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Op_booleano:
                    info[0] = "Operador booleano";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Parentesis_a:
                    info[0] = "Parentesis de apertura";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Parentesis_c:
                    info[0] = "Parentesis de cierre";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Llave_a:
                    info[0] = "Llave de apertura";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Llave_c:
                    info[0] = "Llave de cierr";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Corchete_a:
                    info[0] = "Corchete de apertura";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Corchete_c:
                    info[0] = "Corchete de cierre";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Main:
                    info[0] = "Reservada main";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case P_coma:
                    info[0] = "Punto y coma";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Identificador:
                    info[0] = "Identificador";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case Numero:
                    info[0] = "Numero";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                case ERROR:
                    info[0] = "Simbolo no definido";
                    info[1] = lexer.lexeme;
                    modelo.addRow(info);
                    break;
                default:
                    info[0] = " " + lexer.lexeme +" ";
                    info[1] = "";
                    modelo.addRow(info);
                    break;
            }
        }
    }
    
    private void analizarSintesis()
    {
        String ST = txt_entrada.getText();
        Sintax s = new Sintax(new codigo.LexerCup(new StringReader(ST)));
        
        try {
            s.parse();
            txt_salida.setText("AnÃ¡lisis realizado satisfactoriamente");
            txt_salida.setForeground(new Color(0,153,51)); 

        } catch (Exception ex) {
            Symbol sym = s.getS();
            txt_salida.setText("Error de sintaxis. Linea: " +(sym.right + 1) + " Columna: "+(sym.left+1) + ", Texto: \"" + sym.value +"\"");
            txt_salida.setForeground(Color.red); 
        }
        
    }

    private void CodigoIntermedio() {
        try
        {
            Control parser = new Control(new BufferedReader(new FileReader(archivo)));
            parser.gramatica();
                        
            for(int i=0; i<parser.lineas.size(); i++)
            {
                jTextArea1.append(parser.lineas.get(i));
            }
            
        }
        catch(Exception e)
        {
            System.out.println("Hubo un error.");
        }
    }
}
